//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "WAStorage.h"

#import "WAPersistentRequestManagerRegistering-Protocol.h"

@class NSObject, NSString, WAPaymentSyncTransactionTask, WAPersistentRequestManager, WARepeatingBlockTask, WATaskQueue;
@protocol OS_dispatch_queue;

@interface WAPaymentManager : WAStorage <WAPersistentRequestManagerRegistering>
{
    NSObject<OS_dispatch_queue> *_mainDispatchQueue;
    WAPersistentRequestManager *_persistentRequestManager;
    WAPaymentSyncTransactionTask *_taskToSyncTransactions;
    WARepeatingBlockTask *_taskToSyncHandles;
    NSObject<OS_dispatch_queue> *_dispatchQueue;
}

+ (BOOL)useMainQueueDatabaseConcurrencyType;
+ (id)storeURL;
@property(readonly, nonatomic) WAPersistentRequestManager *persistentRequestManager; // @synthesize persistentRequestManager=_persistentRequestManager;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
- (void).cxx_destruct;
- (void)fullyResetState;
@property(readonly, nonatomic) BOOL hasPaymentAccount;
@property(nonatomic, getter=isTOSAccepted) BOOL tosAccepted;
@property(nonatomic, getter=isAccountSetup) BOOL accountSetup;
- (void)resetUPIPaymentTransactionCacheForTransaction:(id)arg1;
- (id)addOrUpdateOutgoingTransactionForMessageID:(id)arg1 amount_1000:(long long)arg2 currency:(id)arg3 groupJID:(id)arg4 receiverJID:(id)arg5 receiverHandle:(id)arg6 senderJID:(id)arg7 senderHandle:(id)arg8 clTransactionId:(id)arg9 encryptedMpin:(id)arg10 type:(int)arg11 sourceCredentialId:(id)arg12;
- (id)addOrUpdateTransactionFromStanza:(id)arg1 withMessageID:(id)arg2;
- (id)transactionCache:(id)arg1;
- (id)transactionWithMessageID:(id)arg1;
- (id)transactionWithId:(id)arg1;
- (id)transactions:(unsigned int)arg1;
- (id)accountWithId:(id)arg1;
- (id)accounts;
- (id)defaultPaymentAccount;
- (id)initWithPersistentRequestManager:(id)arg1 modelName:(id)arg2 storeURL:(id)arg3 blacklistBackup:(BOOL)arg4;
- (id)initWithPersistentRequestManager:(id)arg1;
- (void)registerUPIHandlersForPersistentRequestManager:(id)arg1;
- (id)requestUPISetMPINForCredentialId:(id)arg1 deviceId:(id)arg2 transactionId:(id)arg3 otp:(id)arg4 mpin:(id)arg5 atmPin:(id)arg6 lastDigits:(id)arg7 expiryMonth:(id)arg8 expiryYear:(id)arg9 defaultDebit:(BOOL)arg10 defaultCredit:(BOOL)arg11;
- (id)requestUPICheckMPINForCredentialId:(id)arg1 deviceId:(id)arg2 transactionId:(id)arg3 mpin:(id)arg4 receiver:(id)arg5 receiverHandle:(id)arg6 senderHandle:(id)arg7;
- (id)requestUPIChangeMPINForCredentialId:(id)arg1 deviceId:(id)arg2 transactionId:(id)arg3 oldMpin:(id)arg4 newMpin:(id)arg5;
- (id)requestUPISyncHandles;
- (id)requestUPIRegisterHandleForBankInfo:(id)arg1 deviceId:(id)arg2 defaultDebit:(BOOL)arg3 defaultCredit:(BOOL)arg4;
- (id)requestUPIListKeys;
- (id)requestUPIGetTokenForDeviceId:(id)arg1 tokenType:(id)arg2 challenge:(id)arg3;
- (id)requestUPIGetHandleForJID:(id)arg1;
- (id)requestUPIGetBanks;
- (id)requestUPIGetAccountsForDeviceId:(id)arg1 bankUniqueId:(id)arg2;
- (id)requestUPIGenerateOTPForDeviceId:(id)arg1 bankInfo:(id)arg2;
- (id)requestUPIEditDefaultCredentialForDeviceId:(id)arg1 credentialId:(id)arg2 makeDefault:(BOOL)arg3;
- (id)requestUPIDeregisterAccountForDeviceId:(id)arg1 handle:(id)arg2;
- (id)requestUPIBindDeviceWithId:(id)arg1 verificationData:(id)arg2;
- (id)requestUPIBatchForDeviceId:(id)arg1 tokenType:(id)arg2 challenge:(id)arg3;
- (void)scheduleSyncHandlesTask;
- (void)cancelUPIBackgroundTasksToSyncDatabase;
- (void)scheduleUPIBackgroundTasksToSyncDatabase;
- (void)updateUPIMpinSetState:(BOOL)arg1 account:(id)arg2;
- (void)updateUPIMpinSetState:(BOOL)arg1 accountId:(id)arg2;
- (void)syncUPIHandlesFromXMPPResponse:(id)arg1;
- (void)removeAllUpiHandles;
- (void)removeUpiHandleForJid:(id)arg1 saveMOC:(BOOL)arg2;
- (id)addOrUpdateUPIHandleFromXMPPResponse:(id)arg1 saveMOC:(BOOL)arg2;
- (id)upiHandleForJid:(id)arg1;
- (void)fullyResetUPIState;
- (void)resetUPITokenAndListKeysState;
- (void)resetUPIBoundDeviceState;
- (void)saveUPIBoundDevice:(id)arg1;
@property(readonly, nonatomic) BOOL UPIDeviceIsBound;
- (void)saveUPIToken:(id)arg1;
@property(readonly, nonatomic) NSString *UPIToken;
- (void)saveUPIListKeys:(id)arg1;
@property(readonly, nonatomic) NSString *UPIListKeys;
- (void)saveUPIHandle:(id)arg1;
@property(readonly, nonatomic) NSString *UPIHandle;
- (BOOL)hasUserDefaultsValueExpiredForDateKey:(id)arg1 expirationInterval:(double)arg2;
- (void)notifyAboutRequestCompletion:(id)arg1 error:(id)arg2 userInfo:(id)arg3;
- (void)registerHandlersForPersistentRequestManager:(id)arg1;
- (id)sharedObjectKeyForPersistentRequestManager:(id)arg1;
- (void)scheduleSyncTransactionTask;
- (id)requestTOSAcceptanceState;
- (id)requestTOSAccept;
- (id)requestGetTransactionsWithBefore:(id)arg1 after:(id)arg2 limit:(int)arg3;
- (id)requestGetTransactionById:(id)arg1;
- (id)requestGetMethods;
- (id)requestDeleteAccountForDeviceId:(id)arg1;
- (id)requestCreateAccount;
- (id)requestAccountSetupState;
- (void)handleTransactionNotification:(id)arg1;
- (void)processIncomingPayNotification:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)registerXMPPNotificationHandler;
- (id)addOrUpdateBankAccount:(id)arg1;
- (id)accountWithId:(id)arg1 expectedType:(int)arg2 createIfNeeded:(BOOL)arg3;
- (id)addOrUpdateTransaction:(id)arg1 ignoreTimestamp:(BOOL)arg2;
- (void)removeAllAccounts;
- (void)removeAccountWithId:(id)arg1;
- (void)deleteObjectsSatisfyingRequest:(id)arg1;
- (void)handleDatabaseContext:(id)arg1 queryError:(id)arg2;
- (void)handleDatabaseContext:(id)arg1 saveError:(id)arg2;
- (void)handleTerminalError:(id)arg1;
- (BOOL)saveDatabase:(id *)arg1;
- (void)didCreateDatabase;
- (void)scheduleDeleteExpiredCacheTask;
- (void)cancelBackgroundTasksToSyncDatabase;
- (void)scheduleBackgroundTasksToSyncDatabase;
- (void)scheduleCleanUpBackgroundTasks;
@property(readonly, nonatomic) WATaskQueue *queueForBackgroundTasks;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

