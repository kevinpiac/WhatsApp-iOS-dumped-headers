//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "WAMMSTaskSessionDelegate-Protocol.h"
#import "WAPersistentRequestManagerRegistering-Protocol.h"
#import "XMPPStreamDelegate-Protocol.h"

@class NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableOrderedSet, NSMutableSet, NSNumber, NSString, WABackoffTracker, WAFieldStatsEventChatConnectionProbe, WAMessageHandler, WATimer, XMPPPassiveModeManager, XMPPStream;
@protocol OS_dispatch_queue, OS_dispatch_source, XMPPConnectionDelegate, XMPPConnectionTestDelegate;

@interface XMPPConnection : NSObject <XMPPStreamDelegate, WAPersistentRequestManagerRegistering, WAMMSTaskSessionDelegate>
{
    WATimer *_updatePresenceTimer;
    NSMutableSet *_deferredSubscribes;
    NSMutableDictionary *_clientData;
    unsigned int _lastSentPresence;
    NSMutableDictionary *_callTimers;
    NSMutableDictionary *_unsentCallStanzas;
    NSMutableArray *_requestsInFlight;
    NSMutableArray *_requestsToSend;
    BOOL _firstOfflineMessageReceived;
    NSMutableArray *_recentlySentAcks;
    NSMutableArray *_acks;
    NSMutableDictionary *_sentReadReceipts;
    NSMutableArray *_readReceiptsToProcess;
    NSObject<OS_dispatch_source> *_delayedProcessTimer;
    double _connectionStartTime;
    id _incomingMessageHandlerPrivate;
    NSMutableSet *_keysForMaxBackgroundConnectionAttemptsOverride;
    NSMutableDictionary *_notificationCallbacks;
    double _connectionAttemptStartTime;
    NSObject<OS_dispatch_source> *_checkConnectionTimer;
    NSObject<OS_dispatch_source> *_checkFieldStatsTimer;
    NSMutableArray *_connectionHandlers;
    NSMutableOrderedSet *_stateChangeCallbacks;
    // Error parsing type: AL, name: _stateULong
    // Error parsing type: AL, name: _networkStatusULong
    NSString *_radioAccessTechnology;
    NSNumber *_lastOfflinePopServerTime;
    // Error parsing type: Ai, name: _connectionId
    NSDictionary *_fallbackIPv4Addresses;
    unsigned int _backgroundConnectionAttempts;
    unsigned int _foregroundConnectionAttempts;
    BOOL _voipNetworkDidChange;
    BOOL _voipOnDemandReachabilityStateSeen;
    BOOL _shouldCallCheckConnectionAfterTransition;
    NSMutableArray *_connectionConditionals;
    BOOL _isConnectionCheckInProgress;
    BOOL _isConnectionCheckResultValid;
    int _suppressReconnectCounter;
    struct __SCNetworkReachability *_reachabilityRef;
    CDStruct_304912e7 _reachabilityContext;
    BOOL _reachabilityOnDemand;
    BOOL _isCheckingInternetConnection;
    NSString *_lastConnectionErrorMessage;
    unsigned long _xmppAuthNetworkStatus;
    WAFieldStatsEventChatConnectionProbe *_connectionProbe;
    double _connectAttemptStartTime;
    unsigned int _busyConnectionTask;
    WABackoffTracker *_streamErrorBackoffTracker;
    WABackoffTracker *_bgTransportBackoffTracker;
    BOOL _active;
    BOOL _backoffEnabled;
    int _lastOfflineQueueCount;
    NSString *_serverPropsVersion;
    id <XMPPConnectionDelegate> _delegate;
    id <XMPPConnectionTestDelegate> _testDelegate;
    XMPPStream *_stream;
    NSObject<OS_dispatch_queue> *_xmppQueue;
    XMPPPassiveModeManager *_passiveModeManager;
    double _voipPushDelayWithSkew;
    double _serverTimeShift;
}

+ (id)stringFromSpamReportOrigin:(unsigned int)arg1;
+ (void)registerNotificationHandlerForType:(unsigned int)arg1 block:(CDUnknownBlockType)arg2;
@property BOOL backoffEnabled; // @synthesize backoffEnabled=_backoffEnabled;
@property(readonly) XMPPPassiveModeManager *passiveModeManager; // @synthesize passiveModeManager=_passiveModeManager;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *xmppQueue; // @synthesize xmppQueue=_xmppQueue;
@property(readonly, nonatomic) XMPPStream *stream; // @synthesize stream=_stream;
@property(nonatomic) __weak id <XMPPConnectionTestDelegate> testDelegate; // @synthesize testDelegate=_testDelegate;
@property(nonatomic) __weak id <XMPPConnectionDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy) NSString *serverPropsVersion; // @synthesize serverPropsVersion=_serverPropsVersion;
@property double serverTimeShift; // @synthesize serverTimeShift=_serverTimeShift;
@property double voipPushDelayWithSkew; // @synthesize voipPushDelayWithSkew=_voipPushDelayWithSkew;
@property int lastOfflineQueueCount; // @synthesize lastOfflineQueueCount=_lastOfflineQueueCount;
@property(nonatomic, getter=isActive) BOOL active; // @synthesize active=_active;
- (void).cxx_destruct;
- (int)loginPayloadConnectionType;
- (id)createPresence:(unsigned int)arg1 withNickname:(id)arg2;
- (id)convertOutgoingEmojiString:(id)arg1;
- (void)registerHandlersForPersistentRequestManager:(id)arg1;
- (id)sharedObjectKeyForPersistentRequestManager:(id)arg1;
- (void)resetBackoff;
- (void)checkInternetConnection;
- (void)radioAccessTechnologyDidChange:(id)arg1;
- (void)reachabilityDidChangeWithFlags:(unsigned int)arg1;
- (void)logReachabilityFlags:(unsigned int)arg1;
- (unsigned int)sendStreamElement:(id)arg1 withMaybeTimeout:(id)arg2 fromExclusiveConnection:(id)arg3 ignoreExclusiveConnection:(BOOL)arg4;
- (unsigned int)sendStreamElement:(id)arg1 withTimeout:(double)arg2 fromExclusiveConnection:(id)arg3 ignoreExclusiveConnection:(BOOL)arg4;
- (unsigned int)sendStreamElement:(id)arg1 fromExclusiveConnection:(id)arg2;
- (unsigned int)sendStreamElement:(id)arg1;
- (BOOL)shouldBindToCellular:(BOOL)arg1;
- (void)setFakeIpHintIfNecessary;
- (BOOL)connectIfPossible;
- (void)checkConnection;
- (BOOL)disconnectIfNeeded;
- (BOOL)isSocketHealthy;
- (void)forceLeaveFetchOfflineStateIfNeeded;
@property(readonly, nonatomic, getter=isTransitionState) BOOL transitionState;
@property(readonly, getter=isConnectedInternal) BOOL connectedInternal;
@property(readonly, getter=isConnected) BOOL connected;
- (void)connect;
- (void)resetConnectionAttemptsImpl;
- (void)resetConnectionAttempts;
- (void)reallyConnect;
- (void)checkFieldStats;
- (void)uploadFieldStats;
- (void)closeStream;
- (void)xmppStreamDidBecomeIdle:(id)arg1;
- (void)xmppStream:(id)arg1 didWriteBytesCount:(unsigned int)arg2;
- (void)xmppStream:(id)arg1 didReadBytesCount:(unsigned int)arg2;
- (BOOL)xmppStream:(id)arg1 didReceiveLoginResponseStanza:(id)arg2;
- (void)xmppStream:(id)arg1 initialConfigurationAsync:(CDUnknownBlockType)arg2;
- (void)xmppStreamDidClose:(id)arg1;
- (void)xmppStream:(id)arg1 didReceiveCustomStanza:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveNotification:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveChatState:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveAck:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveReceipt:(id)arg2;
- (void)xmppStream:(id)arg1 didReceivePresence:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveMessageStanza:(id)arg2;
- (void)xmppStream:(id)arg1 didReceiveIQ:(id)arg2;
- (void)xmppStreamDidNotAuthenticate:(id)arg1 failureCode:(int)arg2 lockDuration:(double)arg3 retryAfter:(double)arg4 tempBanReasonCode:(int)arg5;
- (void)xmppStreamDidAuthenticate:(id)arg1 attributes:(id)arg2 serverTime:(id)arg3 shift:(double)arg4;
- (void)performCommonOnStreamOpen;
- (void)leavePassiveModeIfNeeded;
- (void)passiveModeManagerDidRequestStateChangeTo:(unsigned long)arg1;
- (void)xmppStream:(id)arg1 didReceiveStreamError:(id)arg2;
- (void)xmppStreamDidOpen:(id)arg1;
- (void)xmppStreamDidConnect:(id)arg1;
- (void)mmsSession:(id)arg1 didRequestRouteParameters:(CDUnknownBlockType)arg2;
- (void)sendAckForNotification:(id)arg1;
- (void)sendAckForNotification:(id)arg1 withChildElement:(id)arg2;
- (void)sendIQResponse:(id)arg1 ignoringExclusiveConnection:(BOOL)arg2;
- (void)sendIQResponse:(id)arg1;
- (void)reloadPrivateKey;
- (void)requestExistCheckWithTaskDescription:(id)arg1 authToken:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)sendStatusPrivacyList:(id)arg1 listType:(unsigned int)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestStatusPrivacyListsWithCompletion:(CDUnknownBlockType)arg1;
- (void)requestEncUploadUrlForHash:(id)arg1 messageType:(int)arg2 mediaOrigin:(int)arg3 mediaIndex:(int)arg4 totalMediaCount:(int)arg5 completion:(CDUnknownBlockType)arg6;
- (void)internalRequestEncUploadUrlForHash:(id)arg1 messageType:(int)arg2 mediaOrigin:(int)arg3 mediaIndex:(int)arg4 totalMediaCount:(int)arg5 completion:(CDUnknownBlockType)arg6;
- (void)pingWithCompletion:(CDUnknownBlockType)arg1;
- (void)updateLastSeenTimestamp;
- (void)sendMessageStanza:(id)arg1;
- (void)invalidateAllCallWatchdogTimers;
@property(readonly) unsigned long serverConnectionStatus;
- (void)setNetworkStatus:(unsigned long)arg1;
@property(readonly) unsigned long networkStatus;
- (void)handleRemotePushWithPayload:(id)arg1;
- (void)drop;
- (void)disconnectIfStuckInConnecting;
- (void)disconnect;
- (void)runWhenConnected:(CDUnknownBlockType)arg1;
- (void)runWhenConnectionStateEquals:(unsigned int)arg1 onQueue:(id)arg2 block:(CDUnknownBlockType)arg3;
- (void)runWhenConnectionStateEquals:(unsigned int)arg1 timeout:(double)arg2 onQueue:(id)arg3 block:(CDUnknownBlockType)arg4;
- (void)drainCurrentStateCallbacks;
- (void)preventConnectionUntilNotConnectedExecutes;
- (void)setState:(unsigned long)arg1;
@property(readonly) unsigned long state;
- (void)logConnectionAttemptErrorMessageIfNeeded:(id)arg1;
- (void)checkIfConnectionIsAllowedWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)registerConnectionConditional:(CDUnknownBlockType)arg1 onQueue:(id)arg2;
@property(readonly, nonatomic) NSNumber *currentPort;
@property(readonly, nonatomic) NSString *currentHost;
@property(readonly, nonatomic) NSString *currentIP;
- (void)setXmppUser:(id)arg1;
- (void)cancelAllRequests;
- (void)resendAllPendingRequests;
- (void)enqueueRequest:(id)arg1;
- (BOOL)isRequestPending:(id)arg1;
- (void)notifyConnectionHandlersOfOfflineMarker;
- (void)removeConnectionHandler:(id)arg1;
- (void)addConnectionHandler:(id)arg1;
@property(readonly, copy, nonatomic) NSString *genericNetworkErrorMessage;
@property(readonly, copy, nonatomic) NSString *networkStatusErrorMessage;
- (void)systemTimeChanged:(id)arg1;
@property(readonly) double lastOfflinePopServerTime;
@property(readonly) int connectionId;
- (void)dealloc;
- (id)init;
- (void)reallyRegisterHandlersForPersistentRequestManager:(id)arg1;
- (void)processIncomingCustomStanza:(id)arg1;
- (void)delayedReceiptsUpdate;
- (void)processIncomingAck:(id)arg1;
- (void)processIncomingNotification:(id)arg1;
- (void)processIncomingChatState:(id)arg1;
- (void)processIncomingPresence:(id)arg1;
- (void)processIncomingMessageStanza:(id)arg1;
- (BOOL)isMessageStanzaRecentlyAcked:(id)arg1;
- (void)processIncomingIQ:(id)arg1;
- (void)performOnStreamOpen;
- (void)sendCallReceiptOrAck:(id)arg1;
- (void)sendCallStanza:(id)arg1;
- (void)endCallStanzaTimeout:(id)arg1;
- (void)startCallStanzaTimeout:(id)arg1;
- (void)sendServerErrorReceiptForMessage:(id)arg1;
- (void)sendRetryReceiptForMessage:(id)arg1 retryCount:(unsigned char)arg2;
- (void)sendReadReceiptsForMessagesIfNeeded:(id)arg1;
- (void)sendPlayedReceiptForMessage:(id)arg1;
- (void)sendAckForMessageStanza:(id)arg1 withErrorCode:(int)arg2;
- (void)sendDeliveryReceiptsForMessageStanzas:(id)arg1;
- (void)sendDeliveryReceiptsForChatMessages:(id)arg1;
- (void)resendUnsentCallStanzas;
- (void)respondWithNotificationToServerErrorReceiptForMessage:(id)arg1 toParticipant:(id)arg2;
- (void)sendNotification:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)processMessageStatusChangeRequests:(id)arg1;
- (void)cleanDirtyBits:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)reportVoipPushDelay:(double)arg1;
- (void)sendGlobalPushConfig:(id)arg1 customSettings:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)resetPresenceStateOnStreamClose;
- (void)updatePresence;
- (void)sendPushName:(id)arg1 webClientRequestID:(id)arg2;
- (void)sendPushName:(id)arg1;
- (void)sendPresenceWithNickname:(id)arg1;
- (void)resetCachedLastSeen;
- (id)lastSeenTimestampForJID:(id)arg1;
- (unsigned int)latestChatStateForGroupWithJID:(id)arg1 returningParticipantJID:(out id *)arg2;
- (unsigned int)chatStateForContactWithJID:(id)arg1;
- (void)checkIncomingChatStateForJID:(id)arg1 participantJID:(id)arg2;
- (void)setIncomingChatState:(unsigned int)arg1 forJID:(id)arg2 participantJID:(id)arg3;
- (void)updateLastSentChatState:(unsigned int)arg1 forJID:(id)arg2;
- (void)reportChatState:(unsigned int)arg1 forJID:(id)arg2;
- (void)presenceSubscribeToJIDIfNecessary:(id)arg1;
- (void)resetAllChatStatesAndClearSubscriptions:(BOOL)arg1;
- (void)removeClientDataForJID:(id)arg1;
- (id)addClientDataForJID:(id)arg1;
- (id)clientDataForJID:(id)arg1;
- (BOOL)isOnline:(id)arg1;
- (void)sendChangeAuthPublicKey:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)sendRecoveryToken:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)queryServerPropertiesWithCompletion:(CDUnknownBlockType)arg1;
- (void)requestBroadcastListsWithCompletion:(CDUnknownBlockType)arg1;
- (void)deleteBroadcastListFromServer:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)unsubscribeFromLocationUpdatesFromContactJID:(id)arg1;
- (void)subscribeToLocationUpdatesFromContactJID:(id)arg1 reportParticipants:(BOOL)arg2 completion:(CDUnknownBlockType)arg3;
- (void)stopLocationSharingWithContact:(id)arg1 sequenceNumber:(long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)stopLocationSharingWithContact:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)reportLocation:(id)arg1;
- (void)getProfilePictureForJID:(id)arg1 withInviteCode:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)joinGroupUsingInviteCode:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestInfoForGroupWithInviteCode:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)regenerateInviteCodeForGroupWithJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestInviteCodeForGroupWithJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestParticipatingGroupsWithRequestType:(unsigned int)arg1 completion:(CDUnknownBlockType)arg2;
- (void)deleteGroupWithJID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)leaveGroupWithJID:(id)arg1 webClientRequestID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestInfoForGroupWithJID:(id)arg1 requestType:(unsigned int)arg2 completion:(CDUnknownBlockType)arg3;
- (void)demoteParticipants:(id)arg1 inGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)promoteParticipants:(id)arg1 inGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)addParticipants:(id)arg1 toGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)removeParticipants:(id)arg1 fromGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setAnnouncementOnly:(BOOL)arg1 forGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setLocked:(BOOL)arg1 forGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setDescription:(id)arg1 forGroupWithJID:(id)arg2 previousID:(id)arg3 webClientRequestID:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setSubject:(id)arg1 forGroupWithJID:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)createGroupWithSubject:(id)arg1 description:(id)arg2 participantJIDs:(id)arg3 key:(id)arg4 locked:(BOOL)arg5 webClientRequestID:(id)arg6 completion:(CDUnknownBlockType)arg7;
- (void)getProfilePictureForJID:(id)arg1 type:(unsigned int)arg2 identifier:(id)arg3 retryOnNetworkFailure:(BOOL)arg4 completion:(CDUnknownBlockType)arg5;
- (void)setProfilePictureForJIDv4:(id)arg1 payload:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setProfilePictureForJID:(id)arg1 pictureData:(id)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)getStatusForJIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setStatus:(id)arg1 fromWebClientRequestID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setPrivacySettings:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)queryPrivacySettingsWithCompletion:(CDUnknownBlockType)arg1;
- (void)removeTwoFactorAuthenticationWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)checkIfUserHasTwoFactorAuthenticationWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setTwoFactorAuthenticationCode:(id)arg1 email:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)changeNumberWithUsername:(id)arg1 notify:(BOOL)arg2 notifyJIDs:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)normalizePhoneNumber:(id)arg1 countryCode:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)deleteAccountWithFeedback:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)reportSpamCall:(id)arg1 calleeJID:(id)arg2 callerJID:(id)arg3 isVideo:(BOOL)arg4 durationInMilliseconds:(int)arg5 terminatorJID:(id)arg6 terminationReason:(id)arg7;
- (void)reportSpamJID:(id)arg1 origin:(unsigned int)arg2 webClientRequestID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)reportSpamMessages:(id)arg1 inChatSession:(id)arg2 origin:(unsigned int)arg3 webClientRequestID:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)sendBlockedContactsList:(id)arg1 webClientRequestID:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)getBlockedContactsListWithCompletion:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) WAMessageHandler *incomingMessageHandler;
- (void)unsetBackgroundMaxConnectionAttemptOverrideWithKey:(id)arg1;
- (void)setBackgroundMaxConnectionAttemptOverrideWithKey:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

